#!/usr/bin/env ruby

require 'pathname'
ENV['BUNDLE_GEMFILE'] ||= (Pathname.new(__FILE__).realpath.dirname.parent + 'Gemfile').to_s
$:.unshift((Pathname.new(__FILE__).realpath.dirname.parent + 'lib').to_s)

require 'rubygems'
require 'bundler'
Bundler.require

require 'gdoc'
require 'yaml'
require 'fileutils'

@config = YAML::load_file('config.yml')

GDATA_SOURCE ='jasonw-gdocsexport'

DOCLIST_SCOPE = 'http://docs.google.com/feeds/'
DOCLIST_DOWNLOD_SCOPE = 'http://docs.googleusercontent.com/'
CONTACTS_SCOPE = 'http://www.google.com/m8/feeds/'
SPREADSHEETS_SCOPE = 'http://spreadsheets.google.com/feeds/'

DOCLIST_FEED = DOCLIST_SCOPE + 'default/private/full'

DOCUMENT_DOC_TYPE = 'document'
FOLDER_DOC_TYPE = 'folder'
PRESO_DOC_TYPE = 'presentation'
PDF_DOC_TYPE = 'pdf'
SPREADSHEET_DOC_TYPE = 'spreadsheet'
MINE_LABEL = 'mine'
STARRED_LABEL = 'starred'
TRASHED_LABEL = 'trashed'

@clients = Hash::new

def client(type)
  if @clients[type].nil?
    @clients[type] = case type
    when :doclist
      GData::Client::DocList.new(:version => '3.0', :source => GDATA_SOURCE)
    when :spreadsheets
      GData::Client::Spreadsheets.new(:source => GDATA_SOURCE)
    else
      raise "Unsupported GData client type: #{type}"
    end
    @clients[type].clientlogin(
      @config['authentication']['username'],
      @config['authentication']['password'])
  end
  return @clients[type]
end

def create_doc(entry)
  
  # skip non-content entries such as Chrome bookmarks.
  return nil unless entry.elements['content']
  
  resource_id = entry.elements['gd:resourceId'].text.split(':')
  doc = GDoc::Document.new(entry.elements['title'].text,
                           :type => resource_id[0],
                           :xml => entry.to_s)

  doc.doc_id = resource_id[1]
  doc.last_updated = Time.parse(entry.elements['updated'].text)
  if !entry.elements['gd:lastViewed'].nil?
    doc.last_viewed = Time.parse(entry.elements['gd:lastViewed'].text)
  end
  if !entry.elements['gd:lastModifiedBy/email'].nil?
     doc.last_modified_by = entry.elements['gd:lastModifiedBy/email'].text
  end
  doc.writers_can_invite = entry.elements['docs:writersCanInvite'].attributes['value']
  doc.author = entry.elements['author/email'].text

  entry.elements.each('link') do |link|
    doc.links[link.attributes['rel']] = link.attributes['href']
  end
  doc.links['acl_feedlink'] = entry.elements['gd:feedLink'].attributes['href']
  doc.links['content_src'] = entry.elements['content'].attributes['src']

  entry.elements.each('gd:feedLink/feed/entry') do |feedlink_entry|
    email = feedlink_entry.elements['gAcl:scope'].attributes['value']
    role = feedlink_entry.elements['gAcl:role'].attributes['value']
    doc.add_permission(email, role)
  end
  return doc
end

def create_docs(feed)
  documents = []
  feed.elements.each('entry') do |entry|
    doc = create_doc(entry)
    documents.push(doc) if !doc.nil?
  end
  return documents
end

def get_documents_for(options={})
  uri = DOCLIST_FEED + "/-/#{options[:category].join('/')}"
  uri += "?#{options[:params]}" if options[:params]
  feed = client(:doclist).get(uri).to_xml
  return create_docs(feed)
end

def docs_to_hash(docs)
  hsh = {}
  docs.each do |item|
    parent_link = item.links['http://schemas.google.com/docs/2007#parent']
    parent_id = if parent_link
      parent_link =~ /\Ahttp:\/\/docs.google.com\/feeds\/default\/private\/full\/folder%3A(.+)/
      raise "Bad parent link: #{parent_link.inspect}" unless $1
      $1
    else
      nil
    end
    hsh[item.doc_id] = { :item => item, :parent_id => parent_id }
  end
  hsh
end

def clean_name(name)
  name = name.dup
  name.gsub!(/^\.+/, '')
  name.gsub!(/[\/\\:]/, '-')
  name
end


folders = docs_to_hash(get_documents_for(:category => [FOLDER_DOC_TYPE], :params=>'showfolders=true'))

folders.each do |id,folder|
  folder[:path] = folder[:item].title
  
  parent = folders[folder[:parent_id]]
  while parent
    folder[:path] = clean_name(parent[:item].title) + "/" + folder[:path]
    parent = folders[parent[:parent_id]]
  end
end


documents = docs_to_hash(get_documents_for(:category => ['-']))

folder_cfg = @config['export']['folders']
documents.each do |id,doc|
  if folder_cfg.nil? || folder_cfg.empty? || folder_cfg.include?('')
    doc[:include] = true
  else
    doc[:include] = false
    folder = folders[doc[:parent_id]]
    while folder && !doc[:include]
      doc[:include] ||= folder_cfg.include? folder[:path]
      folder = folders[folder[:parent_id]]
    end
  end
end


documents = documents.select { |id,doc| doc[:include] }
@filenames = []

documents.rescue_each_with_index :stderr => true do |(id,entry),idx|
  doc = entry[:item]
  folder = folders[entry[:parent_id]]
  
  base_path = clean_name(doc.title)
  if folder
    base_path = folder[:path] + "/" + base_path
  end
  
  formats = @config['export']['formats'][doc.type]
  export_urls = Hash.new
  if formats.nil?
    export_urls['default'] = doc.links['content_src']
  else
    [formats].flatten.each do |format|
      export_urls[format] = "#{doc.links['content_src']}&exportFormat=#{format}&format=#{format}"
    end
  end
  
  export_urls.rescue_each do |format,url|
    
    display_type = doc.type + (['default', doc.type].include?(format) ? '': '/'+format)
    
    filename = if format == 'default' || base_path.downcase.end_with?(".#{format}")
      base_path
    else
      "#{base_path}.#{format}"
    end
    
    if @filenames.include? filename.downcase
      raise 'Duplicate filename: ' + filename
    end
    @filenames << filename.downcase
    
    dest = @config['export']['dest'] || '.'
    dest = File.expand_path dest
    path = File.join dest, filename
    FileUtils.mkdir_p File.dirname(path)
    
    print "#{idx+1}/#{documents.size}: \"#{filename}\" (#{display_type})... "
    STDOUT.flush
    
    remote_timestamp = doc.last_updated.utc
    local_timestamp = File.exists?(path) ? File.mtime(path).utc : nil
    
    if !local_timestamp.nil?
      if local_timestamp.to_i == remote_timestamp.to_i
        puts "no changes."
        STDOUT.flush
        next
      end
      if local_timestamp.to_i > remote_timestamp.to_i
        puts "local is newer than remote!"
        STDOUT.flush
        raise "local is newer than remote!"
      end
    end
    
    uri = URI::parse(url)
    client_type = case
    when uri.host == 'spreadsheets.google.com' || uri.path =~ %r{/spreadsheets/}
      :spreadsheets
    else
      :doclist
    end
    
    begin
      resp = client(client_type).get(url)
    rescue Timeout::Error
      print 'retrying... '
      STDOUT.flush
      sleep 5
      resp = client(client_type).get(url)
    end
    
    File.open(path, 'w') do |f|
      f.write(resp.body)
    end
    File.utime Time.now.utc, remote_timestamp, path
    puts "#{resp.body.size} bytes."
    STDOUT.flush
    
  end
  
end
